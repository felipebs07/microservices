services:
  # LOADBALANCER - NGINX
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    networks:
      - company-network 
      - order-network # Adicionar as networks
      - monitoring-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # INFRASCTRUCTURE - MONITORING
  discovery-service:
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "8761:8761"
    environment:
      - EUREKA_HOSTNAME=${EUREKA_HOSTNAME}
    networks:
      - company-network
      - order-network
      - monitoring-network
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring-network
  grafana:
    image: grafana/grafana:9.5.2
    
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./grafana.yml:/etc/grafana/grafana.yml
    depends_on:
      - prometheus
    networks:
      - monitoring-network  

  # INFRASCTRUCTURE - DATABASE
  company-postgres:
    container_name: company-postgres
    image: postgres:latest
    ports:
      - "5434:5432"
    volumes:
      - company_postgres_data:/var/lib/postgresql/data
    networks:
      - company-network
    environment:
      - POSTGRES_DB=${COMPANY_POSTGRES_DB}
      - POSTGRES_USER=${COMPANY_POSTGRES_USER}
      - POSTGRES_PASSWORD=${COMPANY_POSTGRES_PASSWORD}
  order-postgres:
    container_name: order-postgres
    image: postgres:latest
    ports:
      - "5435:5432"
    volumes:
      - order_postgres_data:/var/lib/postgresql/data
    networks:
      - order-network
    environment:
      - POSTGRES_DB=${ORDER_POSTGRES_DB}
      - POSTGRES_USER=${ORDER_POSTGRES_USER}
      - POSTGRES_PASSWORD=${ORDER_POSTGRES_PASSWORD}

  # INFRASCTRUCTURE - MICROSERVICES
  company-service:
    container_name: company-service-1
    build:
      context: ./company-service
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "8080:8080"
    environment:
      - COMPANY_SPRING_DATASOURCE_URL=${COMPANY_SPRING_DATASOURCE_URL}
      - COMPANY_POSTGRES_USER=${COMPANY_POSTGRES_USER}
      - COMPANY_POSTGRES_PASSWORD=${COMPANY_POSTGRES_PASSWORD}

      - REDIS_CACHE_PASSWORD=${REDIS_CACHE_PASSWORD}
      - REDIS_CACHE_PORT=${REDIS_CACHE_PORT}
      - REDIS_CACHE_URL=${REDIS_CACHE_URL}

      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
      - SPRING_LIQUIBASE_ENABLED=true

      - EUREKA_URL_DEFAULT=${EUREKA_URL_DEFAULT}
    depends_on:
      - company-postgres
      - discovery-service
    networks:
      - company-network
    volumes:
      - .env:/app/.env
  order-service:
    container_name: order-service-1
    build:
      context: ./order-service
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "8081:8080"
    environment:
      - ORDER_SPRING_DATASOURCE_URL=${ORDER_SPRING_DATASOURCE_URL}
      - ORDER_POSTGRES_USER=${ORDER_POSTGRES_USER}
      - ORDER_POSTGRES_PASSWORD=${ORDER_POSTGRES_PASSWORD}

      - REDIS_CACHE_PASSWORD=${REDIS_CACHE_PASSWORD}
      - REDIS_CACHE_PORT=${REDIS_CACHE_PORT}
      - REDIS_CACHE_URL=${REDIS_CACHE_URL}

      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
      - SPRING_LIQUIBASE_ENABLED=true

      - EUREKA_URL_DEFAULT=${EUREKA_URL_DEFAULT}
    depends_on:
      - order-postgres
      - discovery-service
    networks:
      - order-network
    volumes:
      - .env:/app/.env

networks:
  company-network:
  order-network:
  monitoring-network:

volumes:
  company_postgres_data:
  order_postgres_data: